A user should be able to follow a subscription.

this should be accomplished through the has many through relationship

read the tutorial again and figure out how it was accomplished.

pretty sure the db is correct, just need to implement the controls for it.

User is follower, subscription is follwoed
subscription.followers is an array of users who follow it

user.following array of all subscriptions followed by a user

follower_id = user_id
followed_id = subscription_id

user_sub.user should return the follower
user_sub.subcription should return the subscription
user.user_sub.create should create a relationship associated with a user

a user has many subscriptions through user_sub
user.subscriptions.include?(example_subscription)
user.subscription.find(example_subscription)

to manipulate the relationship, need subscribe and unsubscribe utility methods for user.subscribe(example_subscription)

need a user page to display their subscriptions (also can link to the account page)

add a button to follow and unfollow a subscription, add to subscriptions show page

redirect to subscriptions after unsubscribe
redirect to current subscription after subscribe

create a user page to display subscriptions, allow for removal from that page? (how did the hartl tut do this)

Create routes for user show page
create view for users
populate subscriptions and a unsub button.
only visible if logged in

get the ids of the shows a user is subscribed to, then run those ids against the subscriptions database and output the names as a list

Add links to the subscriptions within someone's profile page

moderator: person who created the content gives others the ability to edit and delete, including comments associated with it.

add tags to subscriptions and allow sorting by category

add live chats, and up down voted style comments (reddit)
realtime public chat might require async elements and becomes complicated.

-http://josephndungu.com/tutorials/gmail-like-chat-application-in-ruby-on-rails
-http://www.sitepoint.com/mini-chat-rails-server-sent-events/
-https://www.twilio.com/blog/2016/02/add-chat-to-a-rails-app-with-twilio-ip-messaging.html
-https://pusher.com/tutorials

I am trying to create up/down voted comments within rails.  The comments will be available to logged in users who view events.

build a regular comment system with a model and controller, add acts_as_votable and something else to thread the comments?  or has_threaded_comments

try based on what mackenzie did...
associations:

-user has_many topics
-event has_many topics
-topics belongs_to user
-topics belongs_to event
-topics has_many comments
comments belongs_to topics
comments belongs_to user

Use topic instead of title/url reddit combo
acts_as_votable in topic

routes:
resources :topics do
	member do
		put "like", to: "topics#upvote"
		put "dislike" to: "topics#downvote"
	end
end

topics controller

upvote and downvote methods
def upvote
@topic = link.find(params[:id])
link.upvote_by current_user
redirect_to :back
end

views - steal from repo

comments: 53 min

rails g model comments user_id:integer event_id:integer user:references event:references

use scaffold for comments?

Add comments nested in topics
View topics by popularity, sort in views?
